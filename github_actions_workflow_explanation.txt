================================================================================
                    GITHUB ACTIONS WORKFLOW EXPLANATION
                        main.yaml File Breakdown
================================================================================

üöÄ PROJECT: Smart Product Advisor - Customer Support Agent
üìÅ FILE: .github/workflows/main.yaml
üéØ PURPOSE: Automatically build and deploy Docker images to AWS ECR

================================================================================
                              HEADER SECTION
================================================================================

name: Build and push image to ECR

üìù EXPLANATION:
   ‚Ä¢ Names your workflow "Build and push image to ECR"
   ‚Ä¢ This is just a human-readable label that appears in GitHub's Actions tab
   ‚Ä¢ Helps you identify this workflow among others

================================================================================
                              TRIGGER SECTION  
================================================================================

on:
  push:
    branches:
      - main

üìù EXPLANATION:
   ‚Ä¢ Tells GitHub "run this workflow whenever someone pushes code to main branch"
   ‚Ä¢ Think of this as an automatic trigger
   ‚Ä¢ Every time you save changes to your main branch, this process starts
   ‚Ä¢ You can also trigger on pull requests, schedules, or manual triggers

================================================================================
                             JOB DEFINITION
================================================================================

jobs:
  build-and-push-ecr-image:
    name: Build and Push to Amazon ECR
    runs-on: ubuntu-latest

üìù EXPLANATION:
   ‚Ä¢ jobs: Defines what work to do
   ‚Ä¢ build-and-push-ecr-image: Internal name for this job
   ‚Ä¢ name: Human-readable description
   ‚Ä¢ runs-on: ubuntu-latest: Tells GitHub to use a fresh Ubuntu Linux computer

================================================================================
                            STEP 1: GET YOUR CODE
================================================================================

- name: Check out code
  uses: actions/checkout@v2

üìù EXPLANATION:
   ‚Ä¢ Downloads your project's code to the Ubuntu computer
   ‚Ä¢ Like saying "copy my project files to this computer so we can work with them"
   ‚Ä¢ @v2 specifies the version of the checkout action to use
   ‚Ä¢ Essential first step - you need your code before you can build it!

================================================================================
                           STEP 2: INSTALL TOOLS
================================================================================

- name: Install Utilities
  run: |
    sudo apt-get update
    sudo apt-get install -y jq unzip

üìù EXPLANATION:
   ‚Ä¢ Installs helpful tools on the Ubuntu machine
   ‚Ä¢ jq: Tool for processing JSON data (JavaScript Object Notation)
   ‚Ä¢ unzip: Tool for extracting compressed files
   ‚Ä¢ sudo: Run commands with administrator privileges
   ‚Ä¢ apt-get: Package manager for Ubuntu/Debian systems
   ‚Ä¢ -y flag: Automatically answer "yes" to installation prompts

================================================================================
                          STEP 3: CONNECT TO AWS
================================================================================

- name: Configure AWS credentials
  uses: aws-actions/configure-aws-credentials@v1
  with:
    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
    aws-region: us-east-1

üìù EXPLANATION:
   ‚Ä¢ Logs into AWS using secret credentials stored in GitHub
   ‚Ä¢ Like entering your username/password to access Amazon's cloud services
   ‚Ä¢ secrets.: These are securely stored passwords that GitHub keeps hidden
   ‚Ä¢ AWS credentials include:
     - Access Key ID: Your AWS username
     - Secret Access Key: Your AWS password
     - Session Token: Temporary security token (if using temporary credentials)
   ‚Ä¢ us-east-1: AWS region where your resources are located

================================================================================
                      STEP 4: LOGIN TO DOCKER REGISTRY
================================================================================

- name: Login to Amazon ECR
  id: login-ecr
  uses: aws-actions/amazon-ecr-login@v1

üìù EXPLANATION:
   ‚Ä¢ Logs into Amazon ECR (Elastic Container Registry)
   ‚Ä¢ ECR is like a storage warehouse for Docker images on Amazon's cloud
   ‚Ä¢ id: login-ecr: Gives this step a name so other steps can reference results
   ‚Ä¢ This step outputs the registry URL that we'll use later

================================================================================
                         STEP 5: THE DOCKER MAGIC! üê≥
================================================================================

- name: Build, tag, and push image to Amazon ECR
  env:
    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    ECR_REPOSITORY: customer-support-agent
    IMAGE_TAG: latest
  run: |
    docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

üìù ENVIRONMENT VARIABLES SETUP:
   ‚Ä¢ ECR_REGISTRY: The address of your Docker storage warehouse (from login step)
   ‚Ä¢ ECR_REPOSITORY: The specific folder name (customer-support-agent)
   ‚Ä¢ IMAGE_TAG: Version label (latest means newest version)

üìù THE DOCKER COMMANDS:

   üî® DOCKER BUILD COMMAND:
   docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
   
   ‚Ä¢ docker build: Creates a Docker image from your code
   ‚Ä¢ -t: "Tag" - gives the image a name
   ‚Ä¢ The name becomes: [warehouse-address]/customer-support-agent:latest
   ‚Ä¢ . (dot): "Look in current directory for Dockerfile"
   
   üì§ DOCKER PUSH COMMAND:
   docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
   
   ‚Ä¢ docker push: Uploads your Docker image to the cloud storage
   ‚Ä¢ Like uploading a file to Google Drive, but for Docker images
   ‚Ä¢ Makes your image available for deployment anywhere

================================================================================
                           WHAT IS DOCKER? üê≥
                            (Simple Explanation)
================================================================================

Think of Docker like this:

üçΩÔ∏è  Your app: A recipe for a meal
üì¶  Docker image: A pre-made frozen dinner with all ingredients
üî•  Docker container: Actually cooking and eating that frozen dinner  
üè™  ECR: A freezer warehouse that stores all your frozen dinners

Benefits:
‚Ä¢ Your app will run the same way everywhere
‚Ä¢ Easy to share with other developers
‚Ä¢ Consistent environments across development, testing, and production
‚Ä¢ Simplified deployment and scaling

================================================================================
                        WHAT THIS WORKFLOW DOES OVERALL
================================================================================

üé¨ THE COMPLETE PROCESS:

1. üöÄ TRIGGER: You push code to GitHub main branch

2. üñ•Ô∏è  SETUP: GitHub prepares a clean Ubuntu computer in the cloud

3. üì• DOWNLOAD: Gets your latest code from the repository

4. üõ†Ô∏è  PREPARE: Installs necessary tools and connects to AWS

5. üî® BUILD: Creates a "frozen dinner" (Docker image) from your Smart Product 
           Advisor app using your Dockerfile

6. üè™ STORE: Uploads that "frozen dinner" to Amazon's warehouse (ECR)

7. ‚úÖ RESULT: Now anyone can download and run your app from the cloud!

================================================================================
                              WHY THIS IS USEFUL
================================================================================

‚ú® CONSISTENCY: Your app runs exactly the same everywhere
üöÄ DEPLOYMENT: Easy to deploy to production servers  
üë• COLLABORATION: Other developers can run your exact environment
üìà SCALING: Makes it much easier to scale your application
üîÑ AUTOMATION: No manual deployment steps - everything is automated
üõ°Ô∏è  RELIABILITY: Reduces "it works on my machine" problems

================================================================================
                            IMPORTANT NOTES
================================================================================

üîê SECURITY:
   ‚Ä¢ Never put AWS credentials directly in your code
   ‚Ä¢ Always use GitHub Secrets for sensitive information
   ‚Ä¢ ECR repository name can be different from GitHub repository name

üèóÔ∏è  REQUIREMENTS:
   ‚Ä¢ You need a Dockerfile in your project root
   ‚Ä¢ AWS account with ECR repository created
   ‚Ä¢ GitHub repository with proper secrets configured

üìù CUSTOMIZATION:
   ‚Ä¢ You can change ECR_REPOSITORY name to anything you want
   ‚Ä¢ You can modify IMAGE_TAG for versioning (v1.0, v2.0, etc.)
   ‚Ä¢ You can add additional steps for testing, notifications, etc.

================================================================================
                               END OF EXPLANATION
================================================================================

üìö This workflow automates the entire process of taking your Smart Product 
   Advisor code and making it ready for deployment in the cloud!

üéØ Next steps: Make sure you have a Dockerfile and AWS ECR repository set up
   to complete your deployment pipeline. 